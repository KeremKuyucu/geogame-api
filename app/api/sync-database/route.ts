import { type NextRequest, NextResponse } from "next/server"
import { syncDatabaseFromDiscord, uploadDatabaseToDiscord } from "@/lib/database-sync"

export async function GET(request: NextRequest) {
  try {
    console.log("ğŸ”„ Discord'dan veritabanÄ± senkronizasyonu baÅŸlatÄ±lÄ±yor...")

    // Discord'dan gÃ¼ncel veritabanÄ±nÄ± indir
    const database = await syncDatabaseFromDiscord()

    return NextResponse.json({
      success: true,
      message: "VeritabanÄ± baÅŸarÄ±yla senkronize edildi",
      totalUsers: database.users?.length || 0,
      lastUpdated: new Date().toISOString(),
    })
  } catch (error: any) {
    console.error("Senkronizasyon hatasÄ±:", error)
    return NextResponse.json({ error: error.message || "Senkronizasyon hatasÄ±" }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { database } = body

    if (!database) {
      return NextResponse.json({ error: "VeritabanÄ± verisi gerekli" }, { status: 400 })
    }

    console.log("ğŸ“¤ VeritabanÄ± Discord'a yÃ¼kleniyor...")

    // VeritabanÄ±nÄ± Discord'a yÃ¼kle
    const uploadSuccess = await uploadDatabaseToDiscord(database)

    if (uploadSuccess) {
      return NextResponse.json({
        success: true,
        message: "VeritabanÄ± baÅŸarÄ±yla Discord'a yÃ¼klendi",
        lastUpdated: new Date().toISOString(),
      })
    } else {
      return NextResponse.json({ error: "VeritabanÄ± Discord'a yÃ¼klenemedi" }, { status: 500 })
    }
  } catch (error: any) {
    console.error("YÃ¼kleme hatasÄ±:", error)
    return NextResponse.json({ error: error.message || "YÃ¼kleme hatasÄ±" }, { status: 500 })
  }
}
